@page "/sell"
@inject HttpClient Http

<PageTitle>会計 | 翠巒祭</PageTitle>

<h1>会計</h1>

<!-- QR Modal -->
<div class="modal fade" id="Modal" tabindex="-1" aria-labelledby="ModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="ModalLabel">QRコード</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
		<center>
			@if (!string.IsNullOrEmpty(QRCodeStr))
			{
				<p><img width="300" height="300" src="@QRCodeStr"></p>
			}
			else
			{
				<p>QRコード作成中です...</p>
			}
		</center>
		
		@if (item_data != null)
		{
			<table class="table">
				<thead>
					<tr>
						<th>商品名</th>
						<th>価格(円)</th>
						<th>個数</th>
						<th>合計金額(円)</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var item in this.item_data)
					{
						<tr>
							<td>@item.ItemName</td>
							<td>@item.ItemPrice</td>
							<td>@item.ItemNum</td>
							<td>@item.ItemPrices</td>
						</tr>
					}
				</tbody>
			</table>
		}
		<p>すべての合計金額: @AllPrices</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn primary-secondary" data-bs-dismiss="modal">閉じる</button>
      </div>
    </div>
  </div>
</div>

<!-- AllDel Modal -->
<div class="modal fade" id="DelModal" tabindex="-1" aria-labelledby="DelModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="DelModalLabel">警告</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>個数のデータがすべて削除されます。</p>
		<p>(QRコード読み込み後は注文に影響しません。)</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">キャンセル</button>
        <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="AllDel">全削除</button>
      </div>
    </div>
  </div>
</div>

@if (item_data == null)
{
    <p><em>読み込み中…</em></p>
}
else
{
	<div class="footer">
		<a class="under-button" type="button" data-bs-toggle="modal" data-bs-target="#DelModal">削除</a>
		<a class="under-button" type="button" data-bs-toggle="modal" data-bs-target="#Modal" @onclick="QR">QR</a>
	</div>

	@foreach (var item in this.item_data)
	{
		<div class="item" @key="item.ItemName">
			<div class="img"></div>

			<div class="text">
				<div class="text-top">@item.ItemName</div>
				<div class="text-top">
					<a class="button" @onclick="() => Declement(item)" oncontextmenu="return false;">-</a>
						@item.ItemNum 
					<a class="button" @onclick="() => Plus(item)" oncontextmenu="return false;">+</a>
				</div>
				<div>1個: @item.ItemPrice 円</div>
				<div>計: @item.ItemPrices 円</div>
			</div>
		</div>
	}
}

<div style="height: 20vh;"></div>

@code {
    private ItemData[]? item_data;

    protected override async Task OnInitializedAsync()
    {
        item_data = await Http.GetFromJsonAsync<ItemData[]>("sample-data/item.json");
    }

    public class ItemData
    {
        public string? ItemName { get; set; }
        public int ItemPrice { get; set; }
        public int ItemNum = 0;
        public int ItemPrices => (int)(ItemPrice * ItemNum);
	}

	private void AllDel()
	{
		if (item_data != null)
		{
			foreach (var item in this.item_data)
			{
				item.ItemNum = 0;
			}
		}
		StateHasChanged();// UIの再描画
	}

	int AllPrices = 0;
	string qrContent = "";
	string QRCodeStr = string.Empty;
	private void QR()
	{
		// 合計金額を求める処理
		AllPrices = 0;
		if (item_data != null)
		{
			foreach (var item in this.item_data)
			{
				AllPrices += item.ItemPrices;
			}
		}

		// QRコード作成処理(遅いので非同期処理にする予定)
		qrContent = "";
		if (item_data != null)
		{
			foreach (var item in this.item_data)
			{
				string temp = "";
				if (item.ItemName is not null)
					temp = item.ItemName;
				qrContent += temp + ", ";
				qrContent += item.ItemPrice.ToString() + ", ";
				qrContent += item.ItemNum.ToString() + ", ";
				qrContent += item.ItemPrices.ToString() + "; ";
			}
		}
		QRCodeStr = GenerateQRCode.GenerateQR(qrContent);
		// qrContent = string.Empty;
		StateHasChanged();// UIの再描画
	}

	private void Declement(ItemData item)
	{
		if (item.ItemNum != 0)
			item.ItemNum--;
		StateHasChanged();// UIの再描画
	}

	private void Plus(ItemData item)
	{
		item.ItemNum++;
		StateHasChanged();// UIの再描画
	}
}
